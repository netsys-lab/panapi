// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SelectorClient is the client API for Selector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectorClient interface {
	// TODO, substitute remote address in future (potentially)
	Path(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathResponse, error)
	SetPaths(ctx context.Context, in *SetPathsRequest, opts ...grpc.CallOption) (*Empty, error)
	OnPathDown(ctx context.Context, in *OnPathDownRequest, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error)
}

type selectorClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectorClient(cc grpc.ClientConnInterface) SelectorClient {
	return &selectorClient{cc}
}

func (c *selectorClient) Path(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathResponse, error) {
	out := new(PathResponse)
	err := c.cc.Invoke(ctx, "/proto.daemon.v1.Selector/Path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectorClient) SetPaths(ctx context.Context, in *SetPathsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.daemon.v1.Selector/SetPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectorClient) OnPathDown(ctx context.Context, in *OnPathDownRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.daemon.v1.Selector/OnPathDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectorClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/proto.daemon.v1.Selector/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectorServer is the server API for Selector service.
// All implementations must embed UnimplementedSelectorServer
// for forward compatibility
type SelectorServer interface {
	// TODO, substitute remote address in future (potentially)
	Path(context.Context, *PathRequest) (*PathResponse, error)
	SetPaths(context.Context, *SetPathsRequest) (*Empty, error)
	OnPathDown(context.Context, *OnPathDownRequest) (*Empty, error)
	Close(context.Context, *Empty) (*Error, error)
	mustEmbedUnimplementedSelectorServer()
}

// UnimplementedSelectorServer must be embedded to have forward compatible implementations.
type UnimplementedSelectorServer struct {
}

func (UnimplementedSelectorServer) Path(context.Context, *PathRequest) (*PathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Path not implemented")
}
func (UnimplementedSelectorServer) SetPaths(context.Context, *SetPathsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaths not implemented")
}
func (UnimplementedSelectorServer) OnPathDown(context.Context, *OnPathDownRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPathDown not implemented")
}
func (UnimplementedSelectorServer) Close(context.Context, *Empty) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedSelectorServer) mustEmbedUnimplementedSelectorServer() {}

// UnsafeSelectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectorServer will
// result in compilation errors.
type UnsafeSelectorServer interface {
	mustEmbedUnimplementedSelectorServer()
}

func RegisterSelectorServer(s grpc.ServiceRegistrar, srv SelectorServer) {
	s.RegisterService(&Selector_ServiceDesc, srv)
}

func _Selector_Path_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectorServer).Path(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.daemon.v1.Selector/Path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectorServer).Path(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Selector_SetPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectorServer).SetPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.daemon.v1.Selector/SetPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectorServer).SetPaths(ctx, req.(*SetPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Selector_OnPathDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnPathDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectorServer).OnPathDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.daemon.v1.Selector/OnPathDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectorServer).OnPathDown(ctx, req.(*OnPathDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Selector_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectorServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.daemon.v1.Selector/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectorServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Selector_ServiceDesc is the grpc.ServiceDesc for Selector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Selector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.daemon.v1.Selector",
	HandlerType: (*SelectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Path",
			Handler:    _Selector_Path_Handler,
		},
		{
			MethodName: "SetPaths",
			Handler:    _Selector_SetPaths_Handler,
		},
		{
			MethodName: "OnPathDown",
			Handler:    _Selector_OnPathDown_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Selector_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
